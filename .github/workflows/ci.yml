name: Sales Cockpit CI
permissions:
  contents: read
  checks: write
  pull-requests: write
on:
  push:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  # --- Fast lint (no full env install) ---------------------------------------
  lint:
    name: Ruff
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Set up uv (with cache)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: |
            uv.lock
            pyproject.toml
          cache-suffix: ${{ runner.os }}-py3.12
      # - name: Ruff — lint
      #   run: make lint
      - name: Ruff — format check
        run: make fmt-check
  # --- Tests (matrix-ready) ---------------------------------------------------
  tests:
    name: Tests (py ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: lint
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up uv (with cache)
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: |
            uv.lock
            pyproject.toml
          cache-suffix: ${{ runner.os }}-py${{ matrix.python-version }}
      - name: Install project (dev)
        run: make init
      - name: Pytest — run full test suite
        run: make test-ci
      - name: Upload test & coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-py${{ matrix.python-version }}
          path: reports/
          if-no-files-found: warn
          retention-days: 7
  lint-and-test:
    name: lint-and-test (3.12)
    runs-on: ubuntu-latest
    needs: [lint, tests] # wait for both jobs to finish
    if: ${{ needs.lint.result == 'success' && needs.tests.result == 'success' }}
    steps:
      - name: Dummy step
        run: echo "Lint + Tests (3.12) finished ✅"
  # --- Summarize results once per run ----------------------------------------
  summarize:
    name: PR Test Summary
    runs-on: ubuntu-latest
    needs: tests
    if: always()
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Publish unit test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: "artifacts/**/pytest.xml"
